{
    "collab_server" : "",
    "contents" : "################################################################################\n# FPDS Contracting app - October 2017\n# server.R\n################################################################################\n\nrequire(shiny)\nrequire(ggplot2)\nrequire(dplyr)\nrequire(scales)\nrequire(plotly)\nrequire(grid)\nrequire(gridExtra)\nlibrary(forcats)\n\n# server function starts\n\nshinyServer <- function(input, output, session){\n  \n  ################################################################################\n  # Read in and clean up data\n  ################################################################################\n  # read in data            \n  FullData <- read.csv(\"FPDS_data.csv\")\n  \n  # make Big Five the first category (so it displays at the top of the legend)\n  FullData$VendorSize <- relevel(FullData$VendorSize, \"Big Five\")\n\n  # rename some column names\n  names(FullData)[9] <- \"Contract_Type\"\n  names(FullData)[10] <- \"Vendor_Size\"\n  names(FullData)[6] <- \"Platform_Portfolio\"\n  names(FullData)[8] <- \"Competition\"\n  \n  ################################################################################\n  # Subset data based on user input\n  ################################################################################\n  \n  dataset <- reactive({\n    \n    if(input$color_var == 'Category') {\n      FullData <- filter(FullData, Category != \"NULL\")\n    } else if(input$color_var == 'Customer') {\n      FullData <- filter(FullData, Customer != \"NULL\")\n    } else if(input$color_var == 'Contract_Type') {\n      FullData <- filter(FullData, Customer != \"NA\")\n      FullData <- filter(FullData, Contract_Type != \"#N/A\")\n      FullData <- filter(FullData, Contract_Type != \"Unlabeled\")\n      FullData <- filter(FullData, Contract_Type != \"Other\")\n      FullData <- filter(FullData, Category != \"NA\") \n      FullData$Customer <- factor(FullData$Customer, \n                                  levels = c(\"Army\", \"Navy\", \"Air Force\", \"DLA\", \"MDA\", \"Other DoD\"))\n      FullData$Category <- factor(FullData$Category, \n                                  levels = c(\"Products\", \"Services\", \"R&D\"))\n    } else if(input$color_var == 'Competition') {\n      FullData$Competition <- fct_recode(\n        FullData$Competition,\n        \"Comp. w/ One Offer\" = \"Competition with single offer\")\n    } else if(input$color_var == 'Platform_Portfolio') {\n      #FullData$Amount <- FullData$Amount / 1000000000\n      FullData <- filter(FullData, Platform_Portfolio != \"NULL\" & !is.null(Platform_Portfolio))\n      FullData$Platform_Portfolio <- fct_drop(FullData$Platform_Portfolio)\n    } else if(input$color_var == 'Vendor_Size') {\n      \n    }\n    \n    ## subset by year, based on year slider ##\n    \n    # input$Yr[1] is the user-selected minimum year\n    # input$Yr[2] is the user-selected maximum year\n    # as.numeric(levels(FY))[FY] is just FY, converted from a factor to\n    # a numeric variable\n    shown <- filter(FullData, FY >= input$Yr[1] & FY <= input$Yr[2])\n    \n    ## subset data based on which categories the user selected ##\n    \n    # the selectInput widget holds the selected choices as a vector of\n    # strings. This code checks whether the each observation is in the\n    # selected categories, and discards it if isn't in all three.  The %in%\n    # operator is a nice way to avoid typing lots of conditional tests all\n    # strung together \n    if(input$color_var != 'Category') {\n      shown <- filter(shown, Category %in% input$Cat)\n    }\n    \n    if(input$color_var != 'Customer') {\n      shown <- filter(shown, Customer %in% input$Customer)\n    }\n    \n    if(input$color_var != 'Contract_Type') {\n      shown <- filter(shown, `Contract_Type` %in% input$Contract)\n    }\n    \n    if(input$color_var != 'Competition') {\n      shown <- filter(shown, Competition %in% input$Classification)\n    }\n    \n    if(input$color_var != 'Platform_Portfolio') {\n      shown <- filter(shown, `Platform_Portfolio` %in% input$Portfolio)\n    }\n    \n    if(input$color_var != 'Vendor_Size') {\n      shown <- filter(shown, `Vendor_Size` %in% input$VS)\n    }\n    \n    # aggregate amount by (Fiscal Year x Category)\n    shown <- shown %>%\n      group_by(.dots = c( \"FY\", input$color_var)) %>%\n      summarise(Amount = sum(Amount) / 1e9)\n    \n    # create 'Percent' variable as the percent of each FY's obligations that\n    # went to that var\n    shown <- shown %>%\n      group_by(FY) %>%\n      mutate(Percent = Amount / sum(Amount)) \n    \n    shown <- shown %>%\n      filter(!is.na(input$color_var))\n    \n    # reorder by final year percent\n    if(input$color_var == 'Category') {\n      shown$Category <- fct_reorder(\n        shown$Category,\n        (shown$Percent * (shown$FY == input$Yr[2])) ,\n        mean,\n        na.rm = TRUE,\n        .desc = TRUE)\n    } else if(input$color_var == 'Customer') {\n      shown$Customer <- fct_reorder(\n        shown$Customer,\n        (shown$Percent * (shown$FY == input$Yr[2])) ,\n        mean,\n        na.rm = TRUE,\n        .desc = TRUE)\n    } else if(input$color_var == 'Contract_Type') {\n      shown$Contract_Type <- fct_reorder(\n        shown$Contract_Type,\n        (shown$Percent * (shown$FY == input$Yr[2])) ,\n        mean,\n        na.rm = TRUE,\n        .desc = TRUE)\n    } else if(input$color_var == 'Competition') {\n      shown$Competition <- fct_reorder(\n        shown$Competition,\n        (shown$Percent * (shown$FY == input$Yr[2])) ,\n        mean,\n        na.rm = TRUE,\n        .desc = TRUE)\n    } else if(input$color_var == 'Platform_Portfolio') {\n      shown$Platform_Portfolio <- fct_reorder(\n        shown$Platform_Portfolio,\n        (shown$Percent * (shown$FY == input$Yr[2])) ,\n        mean,\n        na.rm = TRUE,\n        .desc = TRUE)\n    } else if(input$color_var == 'Vendor_Size') {\n      shown$Vendor_Size <- fct_reorder(\n        shown$Vendor_Size,\n        (shown$Percent * (shown$FY == input$Yr[2])) ,\n        mean,\n        na.rm = TRUE,\n        .desc = TRUE)\n    }\n    \n    # return the subsetted dataframe to whatever called dataset()\n    return(shown)\n    \n    # end of dataset() function      \n  })\n  \n  ################################################################################\n  # Set colors  \n  ################################################################################\n  colorsetting <- reactive({\n    if(input$color_var == 'Category') {\n      colorset <- \n        c(\"Products\" = \"#CE884E\", \n          \"Services\" = \"#63c5b8\", \n          \"R&D\" = \"#628582\")\n    } else if(input$color_var == 'Customer') {\n      colorset <- \n        c(\"Air Force\" = \"#63c5b8\", \n          \"Army\" = \"#CE884E\", \n          \"Navy\" = \"#554449\", \n          \"MDA\" = \"#008e9d\", \n          \"DLA\" = \"#36605a\", \n          \"Other DoD\" = \"#AD4545\")\n    } else if(input$color_var == 'Contract_Type') {\n      colorset <- \n        c(\"Cost Reimbursement\" = \"#628582\",\n          \"Fixed Price\" = \"#AD4545\",\n          \"Time and Materials\" = \"#84B564\",\n          \"Combination\" = \"#CE884E\")\n    } else if(input$color_var == 'Competition') {\n      colorset <- \n        c(\"Comp. w/ One Offer\" = \"#628582\",\n          \"Effective Competition\" = \"#84B564\",\n          \"No competition\" = \"#C74F4F\",\n          \"Unlabeled\" = \"#554449\")\n    } else if(input$color_var == 'Platform_Portfolio') {\n      colorset <- \n        c(\"Aircraft and Drones\" = \"#554449\", \n          \"Electronics and Communications\" = \"#7C3772\", \n          \"Facilities and Construction\" = \"#36605a\", \n          \"Missile and Space Systems\" = \"#AD4545\", \n          \"Other Products\" = \"#008e9d\", \n          \"Weapons and Ammunition\" = \"#599a9e\", \n          \"Other R&D and Knowledge Based\" = \"#CE884E\", \n          \"Ships & Submarines\" = \"#63c5b8\",\n          \"Land Vehicles\" = \"#C74F4F\", \n          \"Other Services\" = \"#628582\")\n    } else if(input$color_var == 'Vendor_Size') {\n      colorset <- \n        c(\"Big Five\" = \"#C74F4F\",\n          \"Large\" =  \"#5F597C\",\n          \"Medium\" = \"#599a9e\",\n          \"Small\" = \"#84B564\")\n    }\n    \n    DIIGcolors <- scale_color_manual(values = colorset, name = NULL)\n    return(DIIGcolors)\n  })\n  \n  #DIIGcolors <- scale_color_manual(values = colorsetting(), name = NULL)\n  \n  ################################################################################\n  # Set fill colors  \n  ################################################################################\n  fillcolorsetting <- reactive({\n    if(input$color_var == 'Category') {\n      colorset <- \n        c(\"Products\" = \"#CE884E\", \n          \"Services\" = \"#63c5b8\", \n          \"R&D\" = \"#628582\")\n    } else if(input$color_var == 'Customer') {\n      colorset <- \n        c(\"Air Force\" = \"#63c5b8\", \n          \"Army\" = \"#CE884E\", \n          \"Navy\" = \"#554449\", \n          \"MDA\" = \"#008e9d\", \n          \"DLA\" = \"#36605a\", \n          \"Other DoD\" = \"#AD4545\")\n    } else if(input$color_var == 'Contract_Type') {\n      colorset <- \n        c(\"Cost Reimbursement\" = \"#628582\",\n          \"Fixed Price\" = \"#AD4545\",\n          \"Time and Materials\" = \"#84B564\",\n          \"Combination\" = \"#CE884E\")\n    } else if(input$color_var == 'Competition') {\n      colorset <- \n        c(\"Comp. w/ One Offer\" = \"#628582\",\n          \"Effective Competition\" = \"#84B564\",\n          \"No competition\" = \"#C74F4F\",\n          \"Unlabeled\" = \"#554449\")\n    } else if(input$color_var == 'Platform_Portfolio') {\n      colorset <- \n        c(\"Aircraft and Drones\" = \"#554449\", \n          \"Electronics and Communications\" = \"#7C3772\", \n          \"Facilities and Construction\" = \"#36605a\", \n          \"Missile and Space Systems\" = \"#AD4545\", \n          \"Other Products\" = \"#008e9d\", \n          \"Weapons and Ammunition\" = \"#599a9e\", \n          \"Other R&D and Knowledge Based\" = \"#CE884E\", \n          \"Ships & Submarines\" = \"#63c5b8\",\n          \"Land Vehicles\" = \"#C74F4F\", \n          \"Other Services\" = \"#628582\")\n    } else if(input$color_var == 'Vendor_Size') {\n      colorset <- \n        c(\"Big Five\" = \"#C74F4F\",\n          \"Large\" =  \"#5F597C\",\n          \"Medium\" = \"#599a9e\",\n          \"Small\" = \"#84B564\")\n    }\n    DIIGfillcolors <- scale_fill_manual(values = colorset)\n    return(DIIGfillcolors)\n  })\n  \n  #DIIGfillcolors <- scale_fill_manual(values = fillcolorsetting())\n  \n  \n  ################################################################################\n  # Build the plot for output\n  ################################################################################\n  \n  lineplotsetting <- reactive({\n    mainplot <- ggplot(data = dataset(),aes(x=FY, y=Percent))\n    mainplot <- mainplot + \n      geom_line(aes_q(\n        color=as.name(input$color_var)\n        ,group=as.name(input$color_var)\n        #,fill =as.name(input$color_var)\n      ),\n      size = 1.5) +\n\n      ggtitle(paste(\"Contract Obligations by\", input$color_var)) + \n     \n      colorsetting()+\n      \n    ########################################################################################share below\n    # diigtheme1:::diiggraph()+ \n    theme(plot.title = element_text(\n      family = \"Open Sans\", color = \"#554449\", size = 25, face=\"bold\",\n      margin=margin(20,0,30,0), hjust = 0.5)) +\n      \n      coord_cartesian(ylim = c(0, 1.05*max(dataset()$Percent))) +  \n      \n      theme(panel.border = element_blank(),\n            panel.background = element_rect(fill = \"#FCFCFC\", color=\"#FCFCFC\"),\n            plot.background = element_rect(fill = \"#FCFCFC\", color=\"#FCFCFC\"),\n            panel.grid.major.x = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.grid.major.y = element_line(size=.1, color=\"lightgray\"),\n            panel.grid.minor.y = element_line(size=.1, color=\"lightgray\")) +\n      \n      scale_y_continuous(labels=percent) +\n      scale_x_continuous(breaks = seq(input$Yr[1], input$Yr[2], by = 1),\n                         labels = function(x) {substring(as.character(x), 3, 4)}) +\n      \n      theme(legend.position = \"right\") +\n      theme(legend.title=element_blank()) +\n      theme(legend.text = element_text(size = 18, color=\"#554449\")) +\n      theme(legend.key = element_rect(fill=\"#FCFCFC\")) +\n      theme(legend.background = element_rect(fill=\"#FCFCFC\")) + \n      theme(legend.key.width = unit(3,\"line\")) +\n      theme(axis.text.x = element_text(size = 14, color=\"#554449\", margin=margin(-10,0,0,0))) +\n      theme(axis.ticks.length = unit(.00, \"cm\")) +\n      theme(axis.text.y = element_text(size = 14, color=\"#554449\", margin=margin(0,5,0,0))) +\n      theme(axis.title.x = element_text(size = 16, face = \"bold\", color=\"#554449\", margin=margin(15,0,0,0))) +\n      theme(axis.title.y = element_text(size = 16, face = \"bold\", color=\"#554449\", margin=margin(0,15,0,0))) +\n      \n      xlab(\"Fiscal Year\") +\n      ylab(\"Share of Contract Obligations\") +\n      theme(plot.caption = element_text(\n        size = 12, face = \"bold\", color = \"#554449\", family = \"Open Sans\"\n      )) +\n      labs(caption = \"Source: FPDS; CSIS analysis\", size = 30, family= \"Open Sans\")  \n    ########################################################################################share above\n    mainplot \n    #ggplotly(mainplot)\n  })\n  \n  \n  barplotsetting <- reactive({\n    #set the number of rows\n    if(input$color_var == 'Category') {\n      numrow <- 1\n    } else {\n      numrow <- 2\n    } \n    \n    mainplot <- ggplot(data = dataset(),aes(x=FY,weight=Amount))\n    mainplot <- mainplot + \n      geom_bar(aes_q(\n        group=as.name(input$color_var)\n        ,fill =as.name(input$color_var)\n      ),\n      width=.7) +\n      \n      facet_wrap(as.formula(paste0(\"~ `\",input$color_var, \"`\")), \n                 nrow = numrow, scales=\"free_x\", drop = TRUE) + \n      \n      theme(panel.spacing.y = unit(1, \"lines\")) +\n      \n      ggtitle(paste(\"Contract Obligations by\", input$color_var)) + \n      \n    fillcolorsetting() + \n      \n    ##############################################################################facet below \n      theme(plot.title = element_text(\n        family = \"Arial\", color = \"#554449\", size = 25, face=\"bold\",\n        margin=margin(20,0,30,0), hjust = 0.5)) +\n      \n      theme(panel.border = element_blank(),\n            panel.background = element_rect(fill = \"#FCFCFC\"),\n            plot.background = element_rect(fill = \"#FCFCFC\", color=\"#FCFCFC\"),\n            panel.grid.major.x = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.grid.major.y = element_line(size=.1, color=\"lightgray\"),\n            panel.grid.minor.y = element_line(size=.1, color=\"lightgray\")) +\n      \n      scale_x_continuous(breaks = seq(input$Yr[1], input$Yr[2], by = 2),\n                         labels = function(x) {substring(as.character(x), 3, 4)}) +\n      \n      theme(legend.position=\"none\") +\n      theme(strip.background = element_rect(color = \"gray95\", fill=c(\"#fcfcfc\"))) +\n      theme(strip.text.x = element_text(family = \"Open Sans\",\n                                        size = rel(1.2),\n                                        face = \"bold\",\n                                        color = \"#554449\")) +\n      theme(legend.text = element_text(size = 18, color=\"#554449\")) +\n      theme(legend.title = element_text(size = 18, face = \"bold\", color=\"#554449\")) +\n      theme(legend.key = element_rect(fill=\"#fcfcfc\")) +\n      theme(legend.key.width = unit(3,\"line\")) +\n      theme(axis.text.x = element_text(size = 12, color=\"#554449\", margin=margin(-5,0,0,0))) +\n      theme(axis.ticks.length = unit(.00, \"cm\")) +\n      theme(axis.text.y = element_text(size = 12, color=\"#554449\", margin=margin(0,5,0,0))) +\n      theme(axis.title.x = element_text(size = 16, face = \"bold\", color=\"#554449\", margin=margin(15,0,0,0))) +\n      theme(axis.title.y = element_text(size = 16, face = \"bold\", color=\"#554449\", margin=margin(0,15,0,0))) +\n      \n      xlab(\"Fiscal Year\") +\n      ylab(\"Constant 2016 $ Billion\") +\n      theme(plot.caption = element_text(\n        size = 12, face = \"bold\", color = \"#554449\", family = \"Open Sans\"\n      )) +\n      labs(caption = \"Source: FPDS; CSIS analysis\", size = 30, family= \"Open Sans\") \n    ##############################################################################facet above\n    mainplot     \n  })\n  \n  ################################################################################\n  # Run download buttons\n  ################################################################################\n  \n  # run csv download button\n  output$CSVDownloadBtn <- downloadHandler(\n    filename = paste('CSIS-Contract-Obligations-by-Area-', Sys.Date(),'.csv', sep=''),\n    content = function(file) {\n      writedata <- dataset()\n      writedata$Percent <- writedata$Percent * 100\n      write.csv(writedata, file)\n    }\n  )\n  \n  ################################################################################\n  # Run hover section\n  ################################################################################\n  output$hover_info <- renderUI({\n    hover <- input$plot_hover\n    if(is.null(hover)) return(NULL)\n    \n    \n    point <- nearPoints(dataset(), hover, xvar = \"FY\", yvar = \"Amount\",\n                        threshold = 200,\n                        maxpoints = 1, addDist = TRUE)\n    year <- round(hover$x)\n    if(nrow(point) == 0) return(NULL)\n    if(year < input$Yr[1] | year > input$Yr[2]) return(NULL)\n    if(hover$y < 0) return(NULL)\n    \n    hov_amount <- dataset() %>%\n      filter(FY == year & Portfolio == point$Portfolio) %>%\n      .$Amount %>%\n      unlist\n    \n    hov_percent <- dataset() %>%\n      filter(FY == year & Portfolio == point$Portfolio) %>%\n      .$Percent %>%\n      unlist\n    \n    if(hover$y > hov_amount) return(NULL)\n    \n    # calculate point position INSIDE the image as percent of total dimensions\n    # from left (horizontal) and from top (vertical)\n    left_pct <- (hover$x - hover$domain$left) / \n      (hover$domain$right - hover$domain$left)\n    top_pct <- (hover$domain$top - hover$y) / \n      (hover$domain$top - hover$domain$bottom)\n    \n    # calculate distance from left and bottom side of the picture in pixels\n    left_px <- hover$range$left + left_pct * \n      (hover$range$right - hover$range$left)\n    top_px <- hover$range$top + top_pct * \n      (hover$range$bottom - hover$range$top)\n    \n    # Use HTML/CSS to change style of tooltip panel here\n    style <- paste0(\n      \"position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); \",\n      \"left:\", left_px + 2, \"px; top:\", top_px + 2, \"px;\")\n    wellPanel(\n      style = style,\n      p(HTML(paste0(\"<b> Fiscal Year: </b>\", round(hover$x) , \"<br/>\",\n                    \"<b> Portfolio: </b>\", point$Portfolio, \"<br/>\",\n                    \"<b> Share: </b>\", round(hov_percent*100,1), \"%<br/>\",\n                    \"<b> Amount: </b> $\",\n                    round(hov_amount,2),  \" Billion\")))\n    )\n    \n  })\n  \n  \n  ################################################################################\n  # Output the built plot and start the app\n  ################################################################################\n  \n  \n  output$plot <- renderPlot({\n    (switch(input$Chart, \n            `Line` = lineplotsetting(), \n            `Bar`  = barplotsetting()))\n  }, height = 700) \n  \n  \n  \n}",
    "created" : 1508253265288.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "20|82|32|2|\n35|82|168|2|\n171|82|223|2|\n226|82|278|2|\n283|31|338|2|\n341|30|406|2|\n410|82|421|2|\n481|82|491|2|\n",
    "hash" : "2960068594",
    "id" : "FB590D9F",
    "lastKnownWriteTime" : 1508963478,
    "last_content_update" : 1508963597768,
    "path" : "K:/R-Shiny/Interns/Zhian/Contracting/App_Contracting/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}